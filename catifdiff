#!/usr/bin/perl
use strict;
use warnings;
use v5.10;
use Getopt::Std;
use Digest::SHA qw(sha1_hex);

sub slurp_file {
    my ($file) = @_;
    local $/ = undef;
    open my $fh, "<", $file;
    return <$fh>;
}

sub slurp_stdin {
    local $/ = undef;
    return <STDIN>;
}

sub write_file {
    my ($file, $content) = @_;
    open my $fh, ">", $file;
    print $fh $content;
}

sub slurp_all_input {
    my (@argv) = @_;

    my $body;

    if (-p STDIN) {
        $body = slurp_stdin();
    }
    else {
        die "catifdiff only takes input from STDIN\n";
    }

    return $body;
}

sub body_digest_last_time {
    my $store = $_[0];
    return -f $store ? slurp_file($store) : undef
}

sub store_body_digest {
    write_file( $_[0], $_[1] );
}

sub main {
    my %args = @_;
    my $store = $args{store};

    my $body = slurp_all_input;

    my $body_digest = sha1_hex($body);

    if ($_ = body_digest_last_time($store)) {
        return if $body_digest eq $_;
    }

    write_file($store, $body_digest);
    print $body;
}

my %opts;
getopt('s:', \%opts);
main(store => $opts{s});

__END__

=head1 USAGE

some-program | catifdiff -s /path/db

catifdiff does only one job. It captures STDIN for some program output, and only
yield the output if the program output is different from last run. The db specified
with C<-s> stores the digest of.

=head1 INSTALLATION

Just put the program somewhere. There are no external dependencies if using Perl
v5.10 or newer.

=cut
